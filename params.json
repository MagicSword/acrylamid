{"name":"Acrylamid","body":"Acrylamid\r\n=========\r\n\r\nAcrylamid is yet another static blog compiler written in python that\r\naims to be lightweight, fast and producing high quality output. It is\r\nlicensed under BSD Style, 2 clauses.\r\n\r\nWhy?\r\n----\r\n\r\nWhy another static blog compiler, that's a valid question. So, why would\r\nyou use Acrylamid: It's fast when you start blogging and it stays fast\r\nwhen you have hundreds of articles due incremental compilation. It ships\r\nwith all builtin Markdown extensions, custom ones and additional\r\nreStructuredText directives to embed YouTube or Code. With all\r\ncomplexity of Acrylamid itself, it is super easy to use.\r\n\r\nWhy not Acrylamid? It's not well tested by different people with\r\ndifferent requirements. It may has some serious issues I didn't noticed\r\nyet. It also lacks some internal documentation. The default layout is\r\nindeed not the most beautiful and Acrylamid has no asset handling yet.\r\n\r\nFeatures\r\n--------\r\n\r\nAcrylamid is a mixture of [nanoc](http://nanoc.stoneship.org/),\r\n[Pyblosxom](http://pyblosxom.bluesock.org/) and\r\n[Pelican](http://pelican.notmyidea.org/). It features mainly:\r\n\r\n-   blog articles, static pages, tags, RSS/Atom feeds and an article\r\n    overview\r\n-   theming support (using [jinja2](http://jinja.pocoo.org/)) and\r\n    support for jinja2 directly in postings\r\n-   [Markdown](http://daringfireball.net/projects/markdown/),\r\n    [reStructuredText](http://docutils.sourceforge.net/rst.html),\r\n    [textile](https://en.wikipedia.org/wiki/Textile_%28markup_language%29)\r\n    and [pandoc](http://johnmacfarlane.net/pandoc/)\r\n-   Markdown extensions and custom reStructuredText directives\r\n-   MathML, modern web-typography and hyphenation using soft-hyphens\r\n-   RSS/Atom/WordPress import, deployment and a handy CLI\r\n-   it's very flexible/configurable and fast\r\n\r\nQuickstart\r\n----------\r\n\r\n    easy_install -U acrylamid\r\n\r\nIt has actually only one dependency, `jinja2` but for convenience it\r\nalso installs `markdown` and `translitcodec`. In addition it has support\r\nfor PyYAML, reStructuredText, syntax highlighting using pygments,\r\nasciimathml to render MathML and finally smartypants for nicer\r\ntypography.\r\n\r\n    easy_install -U docutils pygments asciimathml smartypants\r\n\r\nGet acrylamid, edit *conf.py* and *layouts/* and compile with:\r\n\r\n    $> acrylamid init myblog\r\n        create  myblog/conf.py\r\n        ...\r\n    $> cd myblog/\r\n    $> acrylamid compile && acrylamid view\r\n          warn  using mtime from <fileentry f'content/sample entry.txt'>\r\n        create  '/articles/index.html', written to output/articles/index.html\r\n        create  'Die Verwandlung', written to output/2011/die-verwandlung/index.html\r\n        create  '/atom/index.html', written to output/atom/index.html\r\n        create  '/rss/index.html', written to output/rss/index.html\r\n        create  '/', written to output/index.html\r\n       * Running on http://127.0.0.1:8000/\r\n\r\n### Real World Examples?\r\n\r\n-   sources from my personal blog:\r\n    [/posativ/blog.posativ.org](https://github.com/posativ/blog.posativ.org/).\r\n-   sebix' (contributer) sources:\r\n    [/sebix/sebix.github.com-sources](https://github.com/sebix/sebix.github.com-sources).\r\n\r\nFilters\r\n-------\r\n\r\nYou can apply various filter to a single entry, to a specific view or\r\nglobally and Acrylamid resolves it automatically (some filters conflict\r\nwith others so you can for example apply *Markdown* as global filter but\r\nrender some entries with reStructuredText). Currently supported by\r\nacrylamid, see\r\n[docs/filters.rst](http://acrylamid.readthedocs.org/en/latest/filters.html)\r\nfor detailed information:\r\n\r\n-   **Markdown**: rendering Markdown (+asciimathml, pygments, built-in\r\n    extensions)\r\n-   **reST**: reStructuredText (+pygments)\r\n-   **pandoc**: Pandoc (+Markdown, textitle, rst, ...)\r\n-   **textile**: using Textile as markup language\r\n-   **HTML**: don't render with filters mentioned above (it's a\r\n    conflicting filter)\r\n-   **typography**:\r\n    [https://code.google.com/p/typogrify](https://code.google.com/p/typogrify)/\r\n    (and custom modifications)\r\n-   **hyphenation**: hyphenate words (len \\> 10) based on language\r\n-   **summarize**: summarizes posts to 200 words\r\n-   **head\\_offset**: decrease headings by offset\r\n-   **jinja2**: write jinja2 in your entries (you can also execute\r\n    system calls therewith)\r\n-   **acronyms**: automatically replace acronyms and abbreviations to\r\n    help unexperienced users\r\n\r\nCommands\r\n--------\r\n\r\nSee [commands](http://acrylamid.readthedocs.org/en/latest/commands.html) for a detailed overview.\r\n\r\n    %> acrylamid --help\r\n    Usage: acrylamid <subcommand> [options] [args]\r\n\r\n    Options:\r\n      -q, --quiet    less verbose\r\n      -v, --verbose  more verbose\r\n      -h, --help     show this help message and exit\r\n      --version      print version details\r\n\r\n    Commands:\r\n      init           initializes base structure in DIR\r\n      create  (new)  creates a new entry\r\n      compile (co)   compile blog\r\n      view           fire up built-in webserver\r\n      autocompile    automatic compilation and serving (short aco)\r\n      clean   (rm)   remove abandoned files\r\n      import         import content from URL\r\n      deploy         run a given TASK\r\n\r\n    All subcommands except `init` require a conf.py file.\r\n\r\nNeed Help?\r\n----------\r\n\r\nJoin `#acrylamid` on [Freenode](http://freenode.net/)!","tagline":"static blogging in python","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}